---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Workshop VPC(CIDR: 10.0.0.0/16) with Private and Public subnets"

Parameters:
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.0.128.0/20
    Description: CidrBlock for public subnet in AZ 1

  PublicSubnet02Block:
    Type: String
    Default: 10.0.144.0/20
    Description: CidrBlock for public subnet in AZ 2

  PrivateSubnet01Block:
    Type: String
    Default: 10.0.176.0/20
    Description: CidrBlock for private subnet in AZ 1

  PrivateSubnet02Block:
    Type: String
    Default: 10.0.192.0/20
    Description: CidrBlock for private subnet in AZ 2

  NamePrefix:
    Type: String
    Default: labs-10-0
    Description: Resource name prefix for all

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Workshop Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
          - NamePrefix

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-vpc"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-igw"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-rtb"

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-private-rtb-az1"

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-private-rtb-az2"

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet01
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIP1.AllocationId"
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-nat-az1"

  NatGateway02:
    DependsOn:
      - NatGatewayEIP2
      - PublicSubnet02
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIP2.AllocationId"
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-nat-az2"

  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-nat-az1"

  NatGatewayEIP2:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-nat-az2"

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: public subnet in az1
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-az1"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: public subnet in az2
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-az2"

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: private subnet in az1
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-private-az1"

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: private subnet in az2
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-private-az2"

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  ExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow external ssh for public access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-external-ssh"

  InternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all internal communications
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcBlock
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-internal-all"

  DBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: DB Security group to access database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VpcBlock
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-internal-mysql"

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
  DBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: RDS DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-rds-subnet-group"
    Type: "AWS::RDS::DBSubnetGroup"

Outputs:
  SubnetIds:
    Description: Subnets IDs in the VPC
    Value:
      !Join [
        ",",
        [
          !Ref PublicSubnet01,
          !Ref PublicSubnet02,
          !Ref PrivateSubnet01,
          !Ref PrivateSubnet02,
        ],
      ]

  SecurityGroups:
    Description: Security groups for the workshop
    Value:
      !Join [
        ",",
        [
          !Ref ExternalSecurityGroup,
          !Ref InternalSecurityGroup,
          !Ref DBSecurityGroup,
        ],
      ]

  DBSubnetGroups:
    Description: DB Subnet groups for the workshop
    Value: !Join [",", [!Ref DBSubnetGroup]]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
